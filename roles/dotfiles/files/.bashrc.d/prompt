
## PROMPT

set_ubuntu_colors() {
    # Set LS_COLORS (GNU).
    #
    #  - `ls` displays colors if the `--color` option is passed.
    #
    #  - The actual colors are configured through the `LS_COLORS` environment variable (built-in
    #    defaults are used if this variable is not set).

    LS_COLORS=""

    LS_COLORS+="no=0;39:"   # Global default
    LS_COLORS+="di=0;36:"   # Directory
    LS_COLORS+="ex=0;32:"   # Executable file
    LS_COLORS+="fi=0;39:"   # File
    LS_COLORS+="ec=:"       # Non-filename text
    LS_COLORS+="mi=1;31:"   # Non-existent file pointed to by a symlink
    LS_COLORS+="ln=target:" # Symbolic link
    LS_COLORS+="or=31;01"   # Symbolic link pointing to a non-existent file

    export LS_COLORS

    # Enable color support
    if [ -x /usr/bin/dircolors ]; then
        if test -r ~/.dircolors; then
            eval "$(dircolors -b ~/.dircolors)"
        fi
    fi
}

set_macos_colors() {
    # Set LSCOLORS (FreeBSD / macOS).
    #
    #  - `ls` displays colors if the `-G` option is passed or if the `CLICOLOR` environment
    #    variable is set.
	#
    #  - The actual colors are configured through the `LSCOLORS` environment variable (built-in
    #    defaults are used if this variable is not set).

	LSCOLORS=""

	LSCOLORS+="gx" # Directory
	LSCOLORS+="fx" # Symbolic link
	LSCOLORS+="cx" # Socket
	LSCOLORS+="dx" # Pipe
	LSCOLORS+="cx" # Executable
	LSCOLORS+="eg" # Block special
	LSCOLORS+="ed" # Character special
	LSCOLORS+="ab" # Executable with setuid bit set
	LSCOLORS+="ag" # Executable with setgid bit set
	LSCOLORS+="cc" # Directory writable to others, with sticky bit
	LSCOLORS+="bd" # Directory writable to others, without sticky bit

	export LSCOLORS
}

enable_color_support() {
    if [[ $COLORTERM == gnome-* && $TERM == xterm ]] \
        && infocmp gnome-256color &> /dev/null; then
        export TERM="gnome-256color"
    elif infocmp xterm-256color &> /dev/null; then
        export TERM="xterm-256color"
    fi

    OS=$(uname)
    case $OS in
        "Darwin"*)
            set_macos_colors
            ;;
        "Linux"*)
            set_ubuntu_colors
            ;;
    esac
}

# [!] Don't break this function into smaller, more specialized ones as you will only pollute the
# global space even more. This function cannot be unset because it's called every time the prompt
# string is shown.
get_git_repository_details() {

    local branchName=""
    local tmp=""

    # Check if the current directory is in a Git repository
    ! git rev-parse &>/dev/null && return

    # Check if in `.git/` directory (some of the following checks don't make sense/won't work in
    # the `.git` directory)
    [ "$(git rev-parse --is-inside-git-dir)" == "true" ] && return

    # Check for uncommitted changes in the index, set + if true
    if ! git diff --quiet --ignore-submodules --cached; then
        tmp="$tmp+";
    fi

    # Check for unstaged changes, set ! if true
    if ! git diff-files --quiet --ignore-submodules --; then
        tmp="$tmp!";
    fi

    # Check for untracked files, set ? if true
    if [ -n "$(git ls-files --others --exclude-standard)" ]; then
        tmp="$tmp?";
    fi

    # Check for stashed files, set $ if true
    if git rev-parse --verify refs/stash &>/dev/null; then
        tmp="$tmp$";
    fi

    [ -n "$tmp" ] && tmp=" [$tmp]"

    branchName="$( printf "%s" "$( git rev-parse --abbrev-ref HEAD 2> /dev/null \
        || git rev-parse --short HEAD 2> /dev/null \
        || printf " (unknown)" )" | tr -d "\n" )"

    printf "%s" "$1$branchName$tmp"
}

set_prompts() {

    local bold=$(tput bold 2> /dev/null)
    local reset=$(tput sgr0 2> /dev/null)

    local cyan=""
    local green=""
    local orange=""
    local white=""
    local yellow=""

    if [ "$(tput colors 2> /dev/null || printf "0")" -ge 256 ]; then
        # Solarized colors.
        # https://github.com/altercation/solarized/tree/master/iterm2-colors-solarized#the-values
        cyan=$(tput setaf 37)
        green=$(tput setaf 64)
        orange=$(tput setaf 166)
        white=$(tput setaf 15)
        yellow=$(tput setaf 136)
    fi

    # Prompt Statement variables.
    # http://ss64.com/bash/syntax-prompt.html

    # ------------------------------------------------------------------
    # | PS1 - Default interactive prompt                               |
    # ------------------------------------------------------------------
    PS1="\[\033]0;\W\007\]" # Terminal title (set to the
                            # current working directory)
    PS1+="$reset$bold"
    PS1+="$orange\u"        # Username
    PS1+="$white@"
    PS1+="$yellow\h"        # Host
    PS1+="$white: "
    PS1+="$green\w"         # Working directory
    PS1+="\[\$(get_git_repository_details \"$white on $cyan\")\]"
    PS1+="\n"               # Do not go to newline
    PS1+="\[$reset\]\[$white\]$ \[$reset\]"

    export PS1

    # ------------------------------------------------------------------
    # | PS2 - Continuation interactive prompt                          |
    # ------------------------------------------------------------------
    PS2="âš¡ "

    export PS2

    # ------------------------------------------------------------------
    # | PS4 - Debug prompt                                             |
    # ------------------------------------------------------------------
    PS4="+$( tput cr 2> /dev/null;
             tput cuf 6 2> /dev/null;
             printf "%s" "$reset" )"

    export PS4
}

main() {
    enable_color_support
    set_prompts
}

main

# Cleanup
unset -f enable_color_support
unset -f main
unset -f set_prompts

# vi: ft=sh :
