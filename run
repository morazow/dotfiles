#!/usr/bin/env bash

## set -o errexit
## Exits a script if any statement return non-true value
set -e

## set -o nounset
## Exits a script if you try to use uninitialized variable
set -u

## If any of the commands fail with a non-zero exit code, then abort the entire
## pipeline with that exit code
set -o pipefail

install_pip_deps() {
    echo "Installing pip"
    curl https://bootstrap.pypa.io/get-pip.py | sudo python

    echo "Installing via pip: ansible, ansible-lint and yamllint"
    sudo -H pip install ansible
    sudo -H pip install ansible-lint
    sudo -H pip install yamllint
}

install_ansible_galaxy_deps() {
    echo "Installing ansible-galaxy dependencies"
    ansible-galaxy install -r requirements.yml
}

setup_macos() {
    if test ! $(which gcc); then
        echo "Installing xcode"
        xcode-select --install
    fi

    if test ! "$(which ansible)"; then
        install_pip_deps
    fi

    install_ansible_galaxy_deps
}

setup_linux() {
    if test ! "$(which python)"; then
        echo "Installing python minimal"
        sudo apt update
        sudo apt install -y python-minimal
    fi

    if test -f /etc/lsb-release && test ! "$(which ansible)"; then
        sudo apt-get install -y software-properties-common
        sudo apt-get update

        install_pip_deps
    fi
}

check_ansible_exists() {
    if test ! "$(which ansible)"; then
        echo "No ansible is installed"
        exit 1
    fi

    echo "Running with versions: "
    python --version
    ansible --version
    ansible-lint --version
    yamllint --version
}

run_lints_checks() {
    yamllint .
    ansible-lint site.yml
    ansible-playbook -i ./hosts site.yml --syntax-check
}


HOST_OS=$(uname)

if test "$HOST_OS" = "Darwin"; then
    setup_macos
elif test "$HOST_OS" = "Linux"; then
    setup_linux
else
    echo "Unknown host OS: $HOST_OS"
    exit 1
fi

check_ansible_exists

run_lints_checks

ansible-playbook -i inventory site.yml
